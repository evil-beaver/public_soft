#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область Регистрация 

Функция СведенияОВнешнейОбработке() Экспорт
	
  Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса("HTTPS","www.ecb.europa.eu",443);	
    
  Версия = СтандартныеПодсистемыСервер.ВерсияБиблиотеки();
  
  Версия = СтандартныеПодсистемыСервер.ВерсияБиблиотеки();
  
  ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(Версия);
  
  ПараметрыРегистрации.Вид 				= "ДополнительнаяОбработка";
  ПараметрыРегистрации.Наименование 	= ЭтотОбъект.Метаданные().Представление(); //Наименование обработки, которым будет заполнено наименование элемента справочника
  ПараметрыРегистрации.Версия 			= "1.0";
  ПараметрыРегистрации.БезопасныйРежим 	= Истина;
  ПараметрыРегистрации.Информация 		= ЭтотОбъект.Метаданные().Представление(); //Краткая информация по обработке, описание обработки
  ПараметрыРегистрации.Разрешения.Добавить(Разрешение);
  
  ДобавитьКоманду(ПараметрыРегистрации.Команды,
          ЭтотОбъект.Метаданные().Представление(), //представление команды в пользовательском интерфейсе
          ЭтотОбъект.Метаданные().ПолноеИмя(), //идентификатор команды; любая строка, уникальная в пределах данной обработки
          "ВызовСерверногоМетода");
		  

 СтрокаНастройки = НСтр("ru = настройка';
					  |vi = 'setting';
					  |en = 'setting';
					  |uk = 'налаштування';
					  |it = 'collocamento';
					  |pl = 'ustawienie'");
  
  СтрокаПредставления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 %2",ЭтотОбъект.Метаданные().Представление(),СтрокаНастройки);
  
  СтрокаИдентификатор = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1%2",ЭтотОбъект.Метаданные().Представление(),СтрокаНастройки);
		  
  ДобавитьКоманду(ПараметрыРегистрации.Команды,
          СтрокаПредставления, //представление команды в пользовательском интерфейсе
          СтрокаИдентификатор,  //идентификатор команды; любая строка, уникальная в пределах данной обработки
          "ОткрытиеФормы");
		  		  
  Возврат ПараметрыРегистрации;

КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;
КонецПроцедуры

Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыВыполненияКоманды = Неопределено) Экспорт
  // Реализация логики команды
  Если ИдентификаторКоманды = ЭтотОбъект.Метаданные().ПолноеИмя() Тогда
	  
	  ЗагрузитьКурсыВалютИзСайтаЦентроБанкаЕС();
	  
  КонецЕсли;
  
КонецПроцедуры

#КонецОбласти 	

#Область МетодыОбработки

Процедура ЗагрузитьКурсыВалютИзСайтаЦентроБанкаЕС()Экспорт
		
	СтрокаЗапроса = "stats/eurofxref/eurofxref-daily.xml";
		
	Данные = ПолучитьОтветЗапросаВалютЦентробанка(СтрокаЗапроса);
	
	ТаблицаОбновляемыхКурсовВалют = ПолучитьТаблицуВалют();
	
	ТаблицаКурсов = Данные.Cube.Cube.Cube;
	
	Для каждого СтрокаКурса Из ТаблицаКурсов Цикл
		
		МассивНайденного = ТаблицаОбновляемыхКурсовВалют.НайтиСтроки(Новый Структура("Наименование",СтрокаКурса.currency));
		
		Если Не МассивНайденного.Количество() Тогда
			
			Продолжить;
			
		КонецЕсли; 
		
		СтрокаВалюты = МассивНайденного.Получить(0);
		
		ЗафиксироватьКурсВалютыНаДату(СтрокаВалюты.Валюта,СтрокаКурса.rate,ТекущаяДатаСеанса());
		
	КонецЦикла; 
	   
КонецПроцедуры

Процедура ЗагрузитьДанныеПоВалютамЦентробанкаЗа90Дней()Экспорт
	
	СтрокаЗапроса = "stats/eurofxref/eurofxref-hist-90d.xml";
	
	Данные = ПолучитьОтветЗапросаВалютЦентробанка(СтрокаЗапроса);
	
	ТаблицаОбновляемыхКурсовВалют = ПолучитьТаблицуВалют();
	
	ТаблицаДат = Данные.Cube.Cube;
	
	Для каждого СтрокаДаты Из ТаблицаДат Цикл
		
		ТаблицаКурсов = СтрокаДаты.Cube;
		
		ФорматированняСтрокаДаты = СтрЗаменить(СтрокаДаты.time,"-","");
			
		ДатаКурса = Дата(ФорматированняСтрокаДаты);
	
		Для каждого СтрокаКурса Из ТаблицаКурсов Цикл
			
			МассивНайденного = ТаблицаОбновляемыхКурсовВалют.НайтиСтроки(Новый Структура("Наименование",СтрокаКурса.currency));
			
			Если Не МассивНайденного.Количество() Тогда
				
				Продолжить;
				
			КонецЕсли; 
			
			СтрокаВалюты = МассивНайденного.Получить(0);
			     					
			ЗафиксироватьКурсВалютыНаДату(СтрокаВалюты.Валюта,СтрокаКурса.rate,ДатаКурса);
			
		КонецЦикла;	
	КонецЦикла;	
		

КонецПроцедуры

Процедура ЗагрузитьДанныеПоВалютамЦентробанкаЗаВесьПериод(ДатаНачалаЗагрузки)Экспорт
	
	СтрокаЗапроса = "stats/eurofxref/eurofxref-sdmx.xml";
	
	Данные = ПолучитьОтветЗапросаВалютЦентробанка(СтрокаЗапроса);
	
	ТаблицаОбновляемыхКурсовВалют = ПолучитьТаблицуВалют();
	
	ТаблицаВалют = Данные.DataSet.Series;
	
	Для каждого СтрокаКурсовВалюты Из ТаблицаВалют Цикл
		
		МассивНайденного = ТаблицаОбновляемыхКурсовВалют.НайтиСтроки(Новый Структура("Наименование",СтрокаКурсовВалюты.CURRENCY));
		
		Если Не МассивНайденного.Количество() Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтрокаВалюты = МассивНайденного.Получить(0);
		
		ТаблицаКурсов = СтрокаКурсовВалюты.Obs;
			
		Для каждого СтрокаКурса Из ТаблицаКурсов Цикл
			
			ФорматированняСтрокаДаты = СтрЗаменить(СтрокаКурса.TIME_PERIOD,"-","");
			
			ДатаКурса = Дата(ФорматированняСтрокаДаты); 
			
			Если ДатаНачалаЗагрузки > ДатаКурса Тогда
			
				Продолжить;
			
			КонецЕсли;
		    					
			ЗафиксироватьКурсВалютыНаДату(СтрокаВалюты.Валюта,СтрокаКурса.OBS_VALUE,ДатаКурса);
			
		КонецЦикла;	
	КонецЦикла;	
		

КонецПроцедуры

Функция ПолучитьТаблицуВалют()

	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Валюты.Ссылка КАК Валюта,
	|	Валюты.Код,
	|	Валюты.Наименование
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	Валюты.СпособУстановкиКурса = ЗНАЧЕНИЕ(Перечисление.СпособыУстановкиКурсаВалюты.ЗагрузкаИзИнтернета)");
	
	ТаблицаОбновляемыхКурсовВалют =  Запрос.Выполнить().Выгрузить();

	Возврат ТаблицаОбновляемыхКурсовВалют

КонецФункции // ПолучитьТаблицуВалют()

Функция ПрочитатьXmlКакДнные(ДанныеСтрокой)

	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ДанныеСтрокой);
	
	Данные = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	Возврат Данные 
	
КонецФункции // ПрочитатьXmlКакДнные()

Процедура ЗафиксироватьКурсВалютыНаДату(Валюта,КурсВалюты,ДатаКурса)
	
	МенеджерКурса = РегистрыСведений.КурсыВалют.СоздатьМенеджерЗаписи();
	МенеджерКурса.Валюта = Валюта;
	МенеджерКурса.Период = ДатаКурса;
	
	КурсВалютыЧислом = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(КурсВалюты);
	
	КурсОтносительноВалютыЕВро = 1/КурсВалютыЧислом;
	
	КратностьВалюты = 100;
		
	МенеджерКурса.Курс  		= КурсОтносительноВалютыЕВро*КратностьВалюты;
	МенеджерКурса.Кратность     = КратностьВалюты;
	
	МенеджерКурса.Записать();
	
КонецПроцедуры

Функция ПолучитьСоединениеССервисом()

	СоединениеССервисом = Новый HTTPСоединение("www.ecb.europa.eu",,,,,,Новый ЗащищенноеСоединениеOpenSSL(,));
	
	Возврат СоединениеССервисом
	
КонецФункции // ПолучитьСоединениеССервисом()

Функция ПолучитьОтветЗапросаВалютЦентробанка(СтрокаЗапроса)

	СоединениеССервисом = ПолучитьСоединениеССервисом();
		
	ЗапросКСервису = Новый HTTPЗапрос(СтрокаЗапроса);
	
	ОтветСервиса   = СоединениеССервисом.Получить(ЗапросКСервису);
	
	ДанныеСтрокой = ОтветСервиса.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	
	Данные = ПрочитатьXmlКакДнные(ДанныеСтрокой);

	Возврат Данные

КонецФункции // ПолучитьОтветЗапросаВалютЦентробанка()

#КонецОбласти 

#КонецЕсли	 